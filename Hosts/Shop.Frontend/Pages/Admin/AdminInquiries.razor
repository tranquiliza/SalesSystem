@page "/admin/inquiries"
@implements IDisposable
@inject IInquiryService inquiryService

<table class="striped">
    <thead>
        <tr>
            <th>Ordernummer</th>
            <th>Efternavn</th>
            <th>Fornavn</th>
            <th>Email</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @if (inquiryService.Inquiries != null)
        {
            @foreach (var inquiry in inquiryService.Inquiries.OrderBy(x => x.State))
            {
                <tr>
                    <td>@inquiry.InquiryNumber</td>
                    <td>@inquiry.Customer?.Surname</td>
                    <td>@inquiry.Customer?.FirstName</td>
                    <td>@inquiry.Customer?.Email</td>
                    <td>
                        @switch (inquiry.State)
                        {
                            case InquiryStateModel.Placed:
                            case InquiryStateModel.PaymentExpected:
                                <span class="btn-flat btn-small red">@inquiry.State</span>
                                break;
                            case InquiryStateModel.PaymentReceived:
                                <span class="btn-flat btn-small green">@inquiry.State</span>
                                break;
                            case InquiryStateModel.Dispatched:
                                <span class="btn-flat btn-small blue">@inquiry.State</span>
                                break;
                        }
                    </td>
                    <td>
                        <a href="/admin/inquiries/@inquiry.Id"><i class="material-icons">description</i></a>
                        @if (inquiry.State == InquiryStateModel.PaymentReceived)
                        {
                            <a><i class="material-icons green-text">check_circle</i></a>
                        }
                    </td>
                </tr>
            }
        }

    </tbody>
</table>

<AdminOnlyComponent />

@code {
    protected override async Task OnInitializedAsync()
    {
        await inquiryService.Initialize();
        inquiryService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        inquiryService.OnChange -= StateHasChanged;
    }
}