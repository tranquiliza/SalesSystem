@inject IProductService productService
@implements IDisposable

@page "/admin/products"

<table class="striped">
    <thead>
        <tr>
            <th>Main Image</th>
            <th>Name</th>
            <th>Category</th>
            <th>Item Price</th>
            <th>Activated</th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var product in productService.Products)
        {
            <tr>
                <td><img style="max-height:4em;" class="responsive-img" src="@(string.IsNullOrEmpty(product.ImageUrl) ? "/images/image-coming-soon-dark.png" : product.ImageUrl)"></td>
                <td>@product.Name</td>
                <td>@product.Category</td>
                <td>@product.Price</td>
                <td>@product.IsActive</td>
                <td>
                    <a href="/admin/products/@product.Id"><i class="material-icons">edit</i></a>
                    <a class="hand-pointer" @onclick="@(async () => await productService.DeleteProduct(product.Id).ConfigureAwait(false))" style="color:red;"><i class="material-icons">delete</i></a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="row">
    <div class="col s12">
        <a href="/admin/products/create" class="btn right">Create Product</a>
    </div>
</div>

<AdminOnlyComponent />

@code {
    protected override async Task OnInitializedAsync()
    {
        await productService.Initialize();
        productService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        productService.OnChange -= StateHasChanged;
    }
}