@inject IInquiryService inquiryService
@implements IDisposable

@page "/admin/inquiries/{inquiryIdString}"

@if (Inquiry != null)
{
    <div class="row">
        <div class="col s12">
            <ul class="collection with-header">
                <li class="collection-header"><h5>Inquiry Information</h5></li>
                <li class="collection-item"><b>Id:</b> @Inquiry.Id</li>
                <li class="collection-item"><b>InquiryNumber:</b> @Inquiry.InquiryNumber</li>
                <li class="collection-item">
                    <b>Status:</b>
                    @switch (Inquiry.State)
                    {
                        case InquiryStateModel.Placed:
                        case InquiryStateModel.PaymentExpected:
                            <span class="btn-flat btn-small red">@Inquiry.State</span>
                            break;
                        case InquiryStateModel.PaymentReceived:
                            <span class="btn-flat btn-small green">@Inquiry.State</span>
                            break;
                        case InquiryStateModel.Dispatched:
                            <span class="btn-flat btn-small blue">@Inquiry.State</span>
                            break;
                    }
                </li>
            </ul>
        </div>

    </div>
    <div class="row">
        <div class="col s6">
            <ul class="collection with-header">
                <li class="collection-header"><h5>Customer Information</h5></li>
                <li class="collection-item"><b>Name:</b> @Inquiry.Customer.Surname, @Inquiry.Customer.FirstName</li>
                <li class="collection-item"><b>Phone:</b> @Inquiry.Customer.PhoneNumber</li>
                <li class="collection-item">
                    <b>Address:</b><br />
                    @Inquiry.Customer.ZipCode @Inquiry.Customer.City<br />
                    @Inquiry.Customer.Country<br />
                    @Inquiry.Customer.StreetNumber
                </li>
            </ul>
        </div>
        <div class="col s6">
            <ul class="collection with-header">
                <li class="collection-header"><h5>Shipping Information (TODO)</h5></li>
                @*<li class="collection-item"><b>Name:</b> @Inquiry.Customer.Surname @Inquiry.Customer.FirstName</li>
                    <li class="collection-item"><b>Phone:</b> @Inquiry.Customer.PhoneNumber</li>
                    <li class="collection-item">
                        <b>Address:</b><br />
                        @Inquiry.Customer.ZipCode @Inquiry.Customer.City<br />
                        @Inquiry.Customer.Country<br />
                        @Inquiry.Customer.StreetNumber
                    </li>*@
            </ul>
        </div>
    </div>

    <div class="row">
        <div class="col s12">
            <ul class="collection with-header">
                <li class="collection-header"><h5>Products</h5></li>
                @foreach (var orderLine in Inquiry.OrderLines)
                {
                    <li class="collection-item">@orderLine.Product.Name : @orderLine.Amount</li>
                }
            </ul>
        </div>
    </div>
}
<div class="row">
    <div class="col s12">
        <a href="/admin/inquiries" class="btn red">Back</a>
    </div>
</div>

<AdminOnlyComponent />

@code {
    [Parameter]
    public string InquiryIdString { get; set; }

    private Guid InquiryId { get; set; }

    private InquiryModel Inquiry { get; set; }

    protected override Task OnParametersSetAsync()
    {
        InquiryId = Guid.Parse(InquiryIdString);

        Inquiry = inquiryService.Inquiries.FirstOrDefault(x => x.Id == InquiryId);

        StateHasChanged();

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await inquiryService.Initialize();
        inquiryService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        inquiryService.OnChange -= StateHasChanged;
    }
}