@inject IJSRuntime JSRuntime
@inject Shop.Frontend.Infrastructure.IApiGateway api
@inject IBasketService basketService
@page "/"

<div class="row">
    <div class="col s12">
        <div class="carousel carousel-slider center">
            @if (products != null)
            {
                @foreach (var product in products)
                {
                    <div style="background-image:url('@product.MainImage.ImageUrl');background-repeat:no-repeat;background-position: center;" class="carousel-item white-text" href="@("#" + product.Id)">
                        <div class="row">
                            <div class="col s6 offset-s3">
                                <h2>@product.Name</h2>
                                <p class="white-text semi-transparent-box">@product.Description</p>
                                <div class="button-group">
                                    <a @onclick="@(async () => await basketService.AddProduct(product.Id))" class="btn waves-effect white grey-text darken-text-2">Add to Cart</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="background-image:url()" class="carousel-item amber white-text" href="#two!">
                    <h2>Second Panel</h2>
                    <p class="white-text">This is your second panel</p>
                    <a class="btn waves-effect white grey-text darken-text-2">b2</a>
                </div>
            }
        </div>
    </div>
</div>


@code {
    public IEnumerable<ProductModel> products;

    protected override async Task OnInitializedAsync()
    {
        products = await api.Get<IEnumerable<ProductModel>>("products");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("InitializeCarousel").ConfigureAwait(false);
        await base.OnAfterRenderAsync(firstRender);
    }
}