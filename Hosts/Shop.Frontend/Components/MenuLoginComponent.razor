@inject IUserService userService
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (userService.IsUserLoggedIn)
{
    <a class="dropdown-trigger waves-effect waves-light" href="user" data-target="logoutDropdown">Bruger Information<i class="material-icons right">arrow_drop_down</i></a>
}
else
{
    <a class="waves-effect waves-light modal-trigger" href="#modalLogin">Log Ind<i class="material-icons right">person</i></a>
}

<ul id="logoutDropdown" class="dropdown-content">
    <li><a href="/User/Inquiries">Mine ordre</a></li>
    <li class="divider"></li>
    <li>
        <a @onclick="@(async () => await userService.TryLogout())">Log Ud</a>
    </li>
</ul>

@code {
    protected override void OnInitialized()
    {
        userService.OnChange += UpdateComponentAsync;
    }

    private Action UpdateComponentAsync => async () => await UpdateComponent();

    protected override async Task OnInitializedAsync()
    {
        await userService.Initialize();
        await JSRuntime.InvokeVoidAsync("InitializeDropDowns").ConfigureAwait(false);
    }

    private async Task UpdateComponent()
    {
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("InitializeDropDowns").ConfigureAwait(false);
    }

    public void Dispose()
    {
        userService.OnChange -= UpdateComponentAsync;
    }
}