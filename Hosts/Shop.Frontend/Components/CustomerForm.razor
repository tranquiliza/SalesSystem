@inject IBasketService basketService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="card-panel">
    <Header Title="Customer Information"></Header>
    <EditForm Model="@model" OnValidSubmit="@AddCustomer">
        <DataAnnotationsValidator />

        <div class="row">
            <div class="input-field col s6">
                <i class="material-icons prefix">person</i>
                <InputText type="text" id="first_name" @bind-Value="model.FirstName"></InputText>
                <label for="first_name">First Name</label>
            </div>
            <div class="input-field col s6">
                <InputText type="text" id="last_name" @bind-Value="model.Surname"></InputText>
                <label for="last_name">Last Name</label>
            </div>
        </div>

        <div class="row">
            <div class="input-field col s12">
                <i class="material-icons prefix">email</i>
                <InputText type="email" id="email" @bind-Value="model.Email"></InputText>
                <label for="email">Email</label>
            </div>
        </div>

        <div class="row">
            <div class="input-field col s6">
                <i class="material-icons prefix">phone</i>
                <InputText type="text" id="phone_number" @bind-Value="model.PhoneNumber"></InputText>
                <label for="phone_number">Phone Number</label>
            </div>
            <div class="input-field col s6">
                <i class="material-icons prefix">my_location</i>
                <InputText type="text" id="country" @bind-Value="model.Country"></InputText>
                <label for="country">Country</label>
            </div>
        </div>

        <div class="row">
            <div class="input-field col s6">
                <i class="material-icons prefix">code</i>
                <InputText type="text" id="zip_code" @bind-Value="model.ZipCode"></InputText>
                <label for="zip_code">Zip Code</label>
            </div>
            <div class="input-field col s6">
                <i class="material-icons prefix">location_city</i>
                <InputText type="text" id="city" @bind-Value="model.City"></InputText>
                <label for="city">City</label>
            </div>
        </div>

        <div class="row">
            <div class="input-field col s12">
                <i class="material-icons prefix">home</i>
                <InputText type="text" id="street_number" @bind-Value="model.StreetNumber"></InputText>
                <label for="street_number">Street Number</label>
            </div>
        </div>

        <div class="row">
            <div class="input-field">
                <button class="btn waves-effect waves-light right" type="submit">
                    Payment
                    <i class="material-icons right">navigate_next</i>
                </button>
            </div>
        </div>

    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback ChangeToPaymentTab { get; set; }

    private AddCustomerToInquiryModel model = new AddCustomerToInquiryModel();

    protected override async Task OnInitializedAsync()
    {
        basketService.OnChange += UpdateComponentAsync;

        await UpdateComponent().ConfigureAwait(false);
    }

    private Action UpdateComponentAsync => async () => await UpdateComponent();

    private async Task UpdateComponent()
    {
        var customerInformation = basketService.CustomerInformation;
        if (customerInformation == null)
            return;

        model.FirstName = customerInformation.FirstName;
        model.Surname = customerInformation.Surname;
        model.Email = customerInformation.Email;
        model.PhoneNumber = customerInformation.PhoneNumber;
        model.Country = customerInformation.Country;
        model.ZipCode = customerInformation.ZipCode;
        model.City = customerInformation.City;
        model.StreetNumber = customerInformation.StreetNumber;

        StateHasChanged();
        await RefreshInputs().ConfigureAwait(false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshInputs().ConfigureAwait(false);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddCustomer()
    {
        var success = await basketService.TryAddCustomer(model).ConfigureAwait(false);
        if (!success)
        {
            // Display why we can't proceed.
            return;
        }

        await ChangeToPaymentTab.InvokeAsync(null);
    }
    private async Task RefreshInputs() => await JSRuntime.InvokeVoidAsync("RefreshInputFields").ConfigureAwait(false);

    public void Dispose()
    {
        basketService.OnChange -= UpdateComponentAsync;
    }
}